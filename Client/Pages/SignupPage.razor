@page "/signup"
@using Blazored.LocalStorage;
@using festival.Client.Services;
@using festival.Server.Interfaces;
@using festival.Shared.Models

@inject ILocalStorageService LocalStorage
@inject IVolunteerService VolunteerService
@inject NavigationManager NavigationManager


<PageTitle>Tilmeld dig som frivillig</PageTitle>
<h2>Tilmeld dig som frivillig</h2>


<div class="container mt-5">
    <EditForm Model="@volunteer" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label for="name">Navn:</label>
            <InputText id="name" class="form-control" @bind-Value="volunteer.Name" />
            <ValidationMessage For="@(() => volunteer.Name)" />
        </div>

        <button type="submit" class="btn btn-primary">Opret dig som frivillig</button>
    </EditForm>
</div>

@code {
    private Volunteer volunteer = new Volunteer();
    private string errorMessage;

    private async Task HandleValidSubmit()
    {
        try
        {
            // Opret den nye frivillige i databasen og få ID'et tilbage
            var createdVolunteer = await VolunteerService.CreateAsync(volunteer);

            // Gem den frivilliges ID og navn i localStorage
            await LocalStorage.SetItemAsync("volunteerId", createdVolunteer.Id);
            await LocalStorage.SetItemAsync("volunteerName", createdVolunteer.Name);

            // Naviger til VolunteerPage
            NavigationManager.NavigateTo("/VolunteerPage");
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
            // Håndter fejl, f.eks. vis en fejlbesked til brugeren
        }
    }

}
