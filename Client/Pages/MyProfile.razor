@page "/myprofile"

@inject IShiftService ShiftService
@inject ILocalStorageService LocalStorage

@using Blazored.LocalStorage;
@using MongoDB.Bson;
@using System.Text.Json;
@using festival.Server.Interfaces;
@using festival.Shared.Models
<link href="css/StyleSheet.css" rel="stylesheet" />

<h2>Velkommen @volunteerName</h2>
<h3>Dine tilmeldte vagter</h3>

@if (myShifts == null)
{
    <p>Henter dine vagter...</p>
}
else if (myShifts.Count == 0)
{
    <p>Du har ingen tilmeldte vagter i øjeblikket.</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>
                    Titel
                </th>
                <th>
                    Område
                </th>
                <th>
                    Starttid
                </th>
                <th>
                    Sluttid
                </th>
                <th>
                    Prioritet
                </th>
                <th>
                    Antal frivillige
                </th>
                <th>
                    Handling
                </th>
            </tr>
        </thead>
        <tbody>
            @foreach (var shift in myShifts)
            {
                <tr>
                    <td>@shift.Title</td>
                    <td>@shift.Area</td>
                    <td>@shift.StartTime</td>
                    <td>@shift.EndTime</td>
                    <td>@shift.Importance.ToString()</td>
                    <td>@shift.RequiredVolunteers</td>
                    <td>
                        <button class="btn btn-danger" @onclick="() => UnassignShift(shift.Id)">Afmeld</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@if (!string.IsNullOrEmpty(message))
{
    <div class="alert alert-info" role="alert">
        @message
    </div>
}

@code {
    private string currentSortColumn = null;
    private bool isSortAscending = true;

    private List<Shift> myShifts;
    private string volunteerName;
    private string volunteerId;
    private string message;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            volunteerId = await LocalStorage.GetItemAsStringAsync("volunteerId");
            volunteerName = await LocalStorage.GetItemAsStringAsync("volunteerName");

            if (string.IsNullOrEmpty(volunteerId))
            {
                message = "Dit frivillige ID er ikke blevet sat. Log venligst ind igen.";
                return;
            }

            // Hent kun dine tilmeldte vagter
            myShifts = await ShiftService.GetAssignedShiftsAsync(volunteerId);
        }
        catch (JsonException jsonEx)
        {
            message = $"Der skete en fejl ved indlæsning af vagter: {jsonEx.Message}";
            // Log yderligere information om fejlen her, eller vis den i brugergrænsefladen.
        }
        catch (Exception ex)
        {
            message = $"Der opstod en uventet fejl: {ex.Message}";
        }
    }

    private async Task UnassignShift(string shiftId)
    {
        bool success = await ShiftService.UnassignVolunteer(shiftId, volunteerId);
        if (success)
        {
            message = "Du er nu afmeldt fra vagten.";
            await UpdateShifts();
        }
        else
        {
            message = "Fejl under afmelding fra vagten.";
        }
    }
  
    private async Task UpdateShifts()
    {
        myShifts = await ShiftService.GetAssignedShiftsAsync(volunteerId);
    }
    private void SortTable(string columnName)
    {
        if (currentSortColumn != columnName)
        {
            currentSortColumn = columnName;
            isSortAscending = true;
        }
        else
        {
            isSortAscending = !isSortAscending;
        }

        Func<Shift, object> keySelector = GetKeySelector(columnName);
        myShifts = isSortAscending ? myShifts.OrderBy(keySelector).ToList()
                                 : myShifts.OrderByDescending(keySelector).ToList();
    }

    private Func<Shift, object> GetKeySelector(string key)
    {
        switch (key)
        {
            case nameof(Shift.Title):
                return x => x.Title;
            case nameof(Shift.Area):
                return x => x.Area;
            case nameof(Shift.StartTime):
                return x => x.StartTime;
            case nameof(Shift.EndTime):
                return x => x.EndTime;
            case nameof(Shift.Importance):
                return x => x.Importance;
            case nameof(Shift.RequiredVolunteers):
                return x => x.RequiredVolunteers;
            case nameof(Shift.AssignedVolunteersId): // For "Åbne pladser"
                return x => x.RequiredVolunteers - x.AssignedVolunteersId.Count;
            default:
                return x => x.Title; // Default to sorting by Title if no match
        }
    }
    private MarkupString SortIndicator(string columnName)
    {
        if (currentSortColumn == columnName)
        {
            return (MarkupString)(isSortAscending ? "↑" : "↓");
        }
        return (MarkupString)"↕"; // Indikator for at kolonnen kan sorteres, men ikke er den aktuelle sorteringskolonne.
    }



}
