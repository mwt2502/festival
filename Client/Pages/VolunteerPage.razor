@page "/volunteerpage"
@inject HttpClient Http
@inject IShiftService ShiftService
@inject ILocalStorageService LocalStorage

@using Blazored.LocalStorage;
@using MongoDB.Bson;
@using festival.Client.Services;
@using festival.Server.Interfaces;
@using festival.Shared.Models

<h2>Velkommen @volunteerName</h2>
<h3>Vælg en vagt</h3>

@if (shifts == null)
{
    <p>Henter tilgængelige vagter...</p>
}
else if (shifts.Count == 0)
{
    <p>Ingen tilgængelige vagter i øjeblikket.</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Titel</th>
                <th>Område</th>
                <th>Starttid</th>
                <th>Sluttid</th>
                <th>Prioritet</th>
                <th>frivillige</th>
                <th>Åbne pladser</th>
                <th></th> <!-- Kolonne for tilmeldingsknappen -->
            </tr>
        </thead>
        <tbody>
            @foreach (var shift in shifts)
            {
                <tr>
                    <td>@shift.Title</td>
                    <td>@shift.Area.ToString()</td>
                    <td>@shift.StartTime</td>
                    <td>@shift.EndTime</td>
                    <td>@shift.Importance.ToString()</td>
                    <td>@shift.RequiredVolunteers</td>
                    <td>@(shift.RequiredVolunteers - shift.AssignedVolunteers)</td>
                    <td>
                        @if (!shift.IsFull)
                        {
                            <button class="btn btn-primary" @onclick="() => AssignShift(shift.Id)">Tilmeld</button>
                        }
                        else
                        {
                            <button class="btn btn-secondary" disabled>Fuld</button>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Shift> shifts;
    private string volunteerName;
    private string volunteerId;

    protected override async Task OnInitializedAsync()
    {
        volunteerId = await LocalStorage.GetItemAsStringAsync("volunteerId") ?? string.Empty;

        // Her henter du alle vagter, men du bør nok kun hente de relevante for den pågældende frivillig.
        shifts = await ShiftService.GetAllAsync();
    }

    private async Task AssignShift(string shiftId)
    {
        // Hent volunteerId og check om den er gyldig.
        if (!ObjectId.TryParse(volunteerId, out var validVolunteerId))
        {
            Console.WriteLine("VolunteerId er ikke gyldig: " + volunteerId);
            return;
        }

        // Antag nu at ShiftService.AssignVolunteer forventer en streng repræsentation af ObjectId.
        try
        {
            await ShiftService.AssignVolunteer(shiftId, validVolunteerId.ToString());
            Console.WriteLine("Frivillig er tilmeldt vagten med succes.");
        }
        catch (Exception ex)
        {
            Console.WriteLine("Fejl under tilmelding til vagten: " + ex.Message);
        }
    }


}
